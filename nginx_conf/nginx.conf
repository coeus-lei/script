user www www;
worker_processes auto;

error_log /data/wwwlogs/error_nginx.log crit;
pid /var/run/nginx.pid;
worker_rlimit_nofile 51200;

events {
  use epoll;
  worker_connections 51200;
  multi_accept on;
}

http {
  server_tag off;
  server_info off;
  include mime.types;
  default_type application/octet-stream;
  server_names_hash_max_size 4096;
  server_names_hash_bucket_size 128;
  client_header_buffer_size 32k;
  large_client_header_buffers 4 32k;
  client_max_body_size 1024m;
  client_body_buffer_size 10m;
  sendfile on;
  tcp_nopush on;
  keepalive_timeout 120;
  server_tokens off;
  tcp_nodelay on;

  fastcgi_connect_timeout 300;
  fastcgi_send_timeout 300;
  fastcgi_read_timeout 300;
  fastcgi_buffer_size 64k;
  fastcgi_buffers 4 64k;
  fastcgi_busy_buffers_size 128k;
  fastcgi_temp_file_write_size 128k;
  fastcgi_intercept_errors on;
  log_format  main  '$remote_addr - $remote_user [$time_local] "$request" $host '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for" "$upstream_addr" "$upstream_status" $upstream_response_time $request_time';

  #Gzip Compression
  gzip on;
  gzip_buffers 16 8k;
  gzip_comp_level 6;
  gzip_http_version 1.1;
  gzip_min_length 256;
  gzip_proxied any;
  gzip_vary on;
  gzip_types
    text/xml application/xml application/atom+xml application/rss+xml application/xhtml+xml image/svg+xml
    text/javascript application/javascript application/x-javascript
    text/x-json application/json application/x-web-app-manifest+json
    text/css text/plain text/x-component
    font/opentype application/x-font-ttf application/vnd.ms-fontobject
    image/x-icon;
  gzip_disable "MSIE [1-6]\.(?!.*SV1)";

  ##Brotli Compression
  #brotli on;
  #brotli_comp_level 6;
  #brotli_types text/plain text/css application/json application/x-javascript text/xml application/xml application/xml+rss text/javascript application/javascript image/svg+xml;

  ##If you have a lot of static files to serve through Nginx then caching of the files' metadata (not the actual files' contents) can save some latency.
  #open_file_cache max=1000 inactive=20s;
  #open_file_cache_valid 30s;
  #open_file_cache_min_uses 2;
  #open_file_cache_errors on;
  include upstream.conf;

######################## default ############################
  map $http_upgrade $connection_upgrade {
        default upgrade;
        ''      close;
    }
    
    geo $remote_addr $ip_block_domian {
        default 0;
        include ./ip_limit/domain.txt;
    }
 
    #upstream
    upstream domain{
        ip_hash;
        #server 10.10.210.1 weight=100;
        #DB
        #server 10.10.210.2 weight=1;
        #server 10.10.210.3 weight=10;
		server 10.10.210.4 weight=100;

        #check interval=3000 rise=2 fall=5 timeout=1000 type=http;
        #check_http_send "HEAD / HTTP/1.1\r\nHost:manage.668cp.cc\r\n\r\n";
        #check_http_expect_alive http_2xx http_3xx;
    }
########################### server ##########################
  server {
            listen      80;
            server_name  $host;
    
            access_log  ./logs/default_access.log  main;
    
            location / {
                return 404;
            }
    
            location ~* .(404.html|50x.html|if.png|500.jpg|404.jpg)$ {
                rewrite ^/(.*)/(.*\.png|.*\.jpg)$  /$2 last;
                root  /usr/local/nginx/conf/html/nginx;
            }
    
    
            error_page 404 /404.html;
            error_page  500 502 503 504 /50x.html;
    }
    
    server {
            listen      443;
            #server_name  $host;
            server_name  $host 127.0.0.1;
    
            ssl on;
            ssl_certificate      /usr/local/nginx/conf/ssl/ca.crt;
            ssl_certificate_key  /usr/local/nginx/conf/ssl/server.key;
    
            access_log  ./logs/default_access.log  main;
    
            location / {
                root /usr/local/nginx/conf/html/main;
                index index.html;
    
                if ($host ~* (.*domain.com)) {
                    rewrite .* http://domain/ redirect;
                }
    
                if ($host != '127.0.0.1') {
                    return 404;
                }
    
            }
            location ~* .(404.html|404.png)$ {
                rewrite ^/(.*)/(.*\.png|.*\.jpg)$  /$2 last;
                root  /usr/local/nginx/conf/html/error;
            }
    
            error_page 404 /404.html;
    }
########################## vhost #############################
  include vhost/*.conf;
  #include waf.conf;
  include vhost/*/*.conf;
}
